# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rsearch
else:
    import _rsearch

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class FloatVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rsearch.FloatVector_swiginit(self, _rsearch.new_FloatVector())

    def push_back(self, arg2):
        return _rsearch.FloatVector_push_back(self, arg2)

    def clear(self):
        return _rsearch.FloatVector_clear(self)

    def data(self):
        return _rsearch.FloatVector_data(self)

    def size(self):
        return _rsearch.FloatVector_size(self)

    def at(self, n):
        return _rsearch.FloatVector_at(self, n)

    def resize(self, n):
        return _rsearch.FloatVector_resize(self, n)

    def swap(self, other):
        return _rsearch.FloatVector_swap(self, other)
    __swig_destroy__ = _rsearch.delete_FloatVector

# Register FloatVector in _rsearch:
_rsearch.FloatVector_swigregister(FloatVector)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rsearch.IntVector_swiginit(self, _rsearch.new_IntVector())

    def push_back(self, arg2):
        return _rsearch.IntVector_push_back(self, arg2)

    def clear(self):
        return _rsearch.IntVector_clear(self)

    def data(self):
        return _rsearch.IntVector_data(self)

    def size(self):
        return _rsearch.IntVector_size(self)

    def at(self, n):
        return _rsearch.IntVector_at(self, n)

    def resize(self, n):
        return _rsearch.IntVector_resize(self, n)

    def swap(self, other):
        return _rsearch.IntVector_swap(self, other)
    __swig_destroy__ = _rsearch.delete_IntVector

# Register IntVector in _rsearch:
_rsearch.IntVector_swigregister(IntVector)

class Int8Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rsearch.Int8Vector_swiginit(self, _rsearch.new_Int8Vector())

    def push_back(self, arg2):
        return _rsearch.Int8Vector_push_back(self, arg2)

    def clear(self):
        return _rsearch.Int8Vector_clear(self)

    def data(self):
        return _rsearch.Int8Vector_data(self)

    def size(self):
        return _rsearch.Int8Vector_size(self)

    def at(self, n):
        return _rsearch.Int8Vector_at(self, n)

    def resize(self, n):
        return _rsearch.Int8Vector_resize(self, n)

    def swap(self, other):
        return _rsearch.Int8Vector_swap(self, other)
    __swig_destroy__ = _rsearch.delete_Int8Vector

# Register Int8Vector in _rsearch:
_rsearch.Int8Vector_swigregister(Int8Vector)

class QueryFormVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rsearch.QueryFormVector_swiginit(self, _rsearch.new_QueryFormVector())

    def push_back(self, arg2):
        return _rsearch.QueryFormVector_push_back(self, arg2)

    def clear(self):
        return _rsearch.QueryFormVector_clear(self)

    def data(self):
        return _rsearch.QueryFormVector_data(self)

    def size(self):
        return _rsearch.QueryFormVector_size(self)

    def at(self, n):
        return _rsearch.QueryFormVector_at(self, n)

    def resize(self, n):
        return _rsearch.QueryFormVector_resize(self, n)

    def swap(self, other):
        return _rsearch.QueryFormVector_swap(self, other)
    __swig_destroy__ = _rsearch.delete_QueryFormVector

# Register QueryFormVector in _rsearch:
_rsearch.QueryFormVector_swigregister(QueryFormVector)

class AreaTimeVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rsearch.AreaTimeVector_swiginit(self, _rsearch.new_AreaTimeVector())

    def push_back(self, arg2):
        return _rsearch.AreaTimeVector_push_back(self, arg2)

    def clear(self):
        return _rsearch.AreaTimeVector_clear(self)

    def data(self):
        return _rsearch.AreaTimeVector_data(self)

    def size(self):
        return _rsearch.AreaTimeVector_size(self)

    def at(self, n):
        return _rsearch.AreaTimeVector_at(self, n)

    def resize(self, n):
        return _rsearch.AreaTimeVector_resize(self, n)

    def swap(self, other):
        return _rsearch.AreaTimeVector_swap(self, other)
    __swig_destroy__ = _rsearch.delete_AreaTimeVector

# Register AreaTimeVector in _rsearch:
_rsearch.AreaTimeVector_swigregister(AreaTimeVector)

CODEBOOK_LINE_SIZE = _rsearch.CODEBOOK_LINE_SIZE
INDEX_EXISTS = _rsearch.INDEX_EXISTS
INDEX_NO_FIND = _rsearch.INDEX_NO_FIND
TRAINDATA_ERROR = _rsearch.TRAINDATA_ERROR
NO_TRAIN = _rsearch.NO_TRAIN
NO_SUPPORT_NUM_LT_K = _rsearch.NO_SUPPORT_NUM_LT_K
NO_SUPPORT = _rsearch.NO_SUPPORT
SIZE_TOO_BIG = _rsearch.SIZE_TOO_BIG
LOAD_DATA_ERROR = _rsearch.LOAD_DATA_ERROR
COSINE = _rsearch.COSINE
EUCLIDEAN = _rsearch.EUCLIDEAN
DUMMY = _rsearch.DUMMY
X86_RAPID = _rsearch.X86_RAPID
X86_PQIVF = _rsearch.X86_PQIVF
X86_RAPID_MULTI_THREAD = _rsearch.X86_RAPID_MULTI_THREAD
X86_PQIVF_MULTI_THREAD = _rsearch.X86_PQIVF_MULTI_THREAD
FAISS_FLAT = _rsearch.FAISS_FLAT
FAISS_LSH = _rsearch.FAISS_LSH
FAISS_HNSW = _rsearch.FAISS_HNSW
FAISS_IVFPQ = _rsearch.FAISS_IVFPQ
FAISS_IVF = _rsearch.FAISS_IVF
Con_index = _rsearch.Con_index
CPU_BASE_GALLERY = _rsearch.CPU_BASE_GALLERY
PQIVF_GALLERY = _rsearch.PQIVF_GALLERY
SIMPLE_GALLERY = _rsearch.SIMPLE_GALLERY
FLOAT32 = _rsearch.FLOAT32
INT8 = _rsearch.INT8
INT32 = _rsearch.INT32
INT64 = _rsearch.INT64
COMP_LT = _rsearch.COMP_LT
COMP_GT = _rsearch.COMP_GT
COMP_EQ = _rsearch.COMP_EQ
COMP_LTE = _rsearch.COMP_LTE
COMP_GTE = _rsearch.COMP_GTE
LT_B = _rsearch.LT_B
EQ_B = _rsearch.EQ_B
GT_B = _rsearch.GT_B
class query_form(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    offset = property(_rsearch.query_form_offset_get, _rsearch.query_form_offset_set)
    data = property(_rsearch.query_form_data_get, _rsearch.query_form_data_set)
    comp_type = property(_rsearch.query_form_comp_type_get, _rsearch.query_form_comp_type_set)
    var_type = property(_rsearch.query_form_var_type_get, _rsearch.query_form_var_type_set)

    def __init__(self):
        _rsearch.query_form_swiginit(self, _rsearch.new_query_form())
    __swig_destroy__ = _rsearch.delete_query_form

# Register query_form in _rsearch:
_rsearch.query_form_swigregister(query_form)

class area_time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    longtitude = property(_rsearch.area_time_longtitude_get, _rsearch.area_time_longtitude_set)
    latitude = property(_rsearch.area_time_latitude_get, _rsearch.area_time_latitude_set)
    timestamp = property(_rsearch.area_time_timestamp_get, _rsearch.area_time_timestamp_set)

    def __init__(self):
        _rsearch.area_time_swiginit(self, _rsearch.new_area_time())
    __swig_destroy__ = _rsearch.delete_area_time

# Register area_time in _rsearch:
_rsearch.area_time_swigregister(area_time)


def construct_area_time(longtitude, latitude, timestamp):
    return _rsearch.construct_area_time(longtitude, latitude, timestamp)

def query_area_time_longtitude_lte(v):
    return _rsearch.query_area_time_longtitude_lte(v)

def query_area_time_longtitude_gte(v):
    return _rsearch.query_area_time_longtitude_gte(v)

def query_area_time_latitude_lte(v):
    return _rsearch.query_area_time_latitude_lte(v)

def query_area_time_latitude_gte(v):
    return _rsearch.query_area_time_latitude_gte(v)

def query_area_time_timestamp_lte(v):
    return _rsearch.query_area_time_timestamp_lte(v)

def query_area_time_timestamp_gte(v):
    return _rsearch.query_area_time_timestamp_gte(v)

def get_int_pp():
    return _rsearch.get_int_pp()

def get_int(a):
    return _rsearch.get_int(a)

def get_int_p(*args):
    return _rsearch.get_int_p(*args)

def int2size_t(a):
    return _rsearch.int2size_t(a)
class result(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    v = property(_rsearch.result_v_get, _rsearch.result_v_set)

    def __init__(self):
        _rsearch.result_swiginit(self, _rsearch.new_result())
    __swig_destroy__ = _rsearch.delete_result

# Register result in _rsearch:
_rsearch.result_swigregister(result)

class simple_index_areatime(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rsearch.simple_index_areatime_swiginit(self, _rsearch.new_simple_index_areatime())
    __swig_destroy__ = _rsearch.delete_simple_index_areatime

    def add(self, x, n):
        return _rsearch.simple_index_areatime_add(self, x, n)

    def add_with_uids(self, x, uids, n):
        return _rsearch.simple_index_areatime_add_with_uids(self, x, uids, n)

    def change_by_uids(self, x, uids, n):
        return _rsearch.simple_index_areatime_change_by_uids(self, x, uids, n)

    def remove_by_uids(self, uid, n):
        return _rsearch.simple_index_areatime_remove_by_uids(self, uid, n)

    def query_by_uids(self, uid, n, x):
        return _rsearch.simple_index_areatime_query_by_uids(self, uid, n, x)

    def reset(self):
        return _rsearch.simple_index_areatime_reset(self)

    def store_data(self, file_name):
        return _rsearch.simple_index_areatime_store_data(self, file_name)

    def load_data(self, file_name):
        return _rsearch.simple_index_areatime_load_data(self, file_name)

    def query(self, x, n, idx, res):
        return _rsearch.simple_index_areatime_query(self, x, n, idx, res)

    def query_with_uids(self, x, n, uids, m, idx, res):
        return _rsearch.simple_index_areatime_query_with_uids(self, x, n, uids, m, idx, res)

# Register simple_index_areatime in _rsearch:
_rsearch.simple_index_areatime_swigregister(simple_index_areatime)

class rsearch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _rsearch.rsearch_swiginit(self, _rsearch.new_rsearch(*args))
    __swig_destroy__ = _rsearch.delete_rsearch

    def query(self, *args):
        return _rsearch.rsearch_query(self, *args)

    def query_with_uids(self, *args):
        return _rsearch.rsearch_query_with_uids(self, *args)

    def add(self, *args):
        return _rsearch.rsearch_add(self, *args)

    def add_with_uids(self, *args):
        return _rsearch.rsearch_add_with_uids(self, *args)

    def change_by_uids(self, *args):
        return _rsearch.rsearch_change_by_uids(self, *args)

    def remove_by_uids(self, uids, n):
        return _rsearch.rsearch_remove_by_uids(self, uids, n)

    def query_by_uids(self, *args):
        return _rsearch.rsearch_query_by_uids(self, *args)

    def reset(self):
        return _rsearch.rsearch_reset(self)

    def train(self, x, n):
        return _rsearch.rsearch_train(self, x, n)

    def store_data(self, file_name):
        return _rsearch.rsearch_store_data(self, file_name)

    def load_data(self, file_name):
        return _rsearch.rsearch_load_data(self, file_name)
    dimension = property(_rsearch.rsearch_dimension_get, _rsearch.rsearch_dimension_set)
    topk = property(_rsearch.rsearch_topk_get, _rsearch.rsearch_topk_set)
    var_type = property(_rsearch.rsearch_var_type_get, _rsearch.rsearch_var_type_set)
    method_type = property(_rsearch.rsearch_method_type_get, _rsearch.rsearch_method_type_set)

# Register rsearch in _rsearch:
_rsearch.rsearch_swigregister(rsearch)


def memcpy(dest, src, n):
    return _rsearch.memcpy(dest, src, n)

def swig_ptr(a):
    return _rsearch.swig_ptr(a)

def rev_swig_ptr(*args):
    return _rsearch.rev_swig_ptr(*args)


