# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_rsearch', [dirname(__file__)])
        except ImportError:
            import _rsearch
            return _rsearch
        if fp is not None:
            try:
                _mod = imp.load_module('_rsearch', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _rsearch = swig_import_helper()
    del swig_import_helper
else:
    import _rsearch
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_rsearch.CODEBOOK_LINE_SIZE_swigconstant(_rsearch)
CODEBOOK_LINE_SIZE = _rsearch.CODEBOOK_LINE_SIZE

_rsearch.INDEX_EXISTS_swigconstant(_rsearch)
INDEX_EXISTS = _rsearch.INDEX_EXISTS

_rsearch.INDEX_NO_FIND_swigconstant(_rsearch)
INDEX_NO_FIND = _rsearch.INDEX_NO_FIND

_rsearch.TRAINDATA_ERROR_swigconstant(_rsearch)
TRAINDATA_ERROR = _rsearch.TRAINDATA_ERROR

_rsearch.NO_TRAIN_swigconstant(_rsearch)
NO_TRAIN = _rsearch.NO_TRAIN

_rsearch.NO_SUPPORT_NUM_LT_K_swigconstant(_rsearch)
NO_SUPPORT_NUM_LT_K = _rsearch.NO_SUPPORT_NUM_LT_K

_rsearch.NO_SUPPORT_swigconstant(_rsearch)
NO_SUPPORT = _rsearch.NO_SUPPORT

_rsearch.SIZE_TOO_BIG_swigconstant(_rsearch)
SIZE_TOO_BIG = _rsearch.SIZE_TOO_BIG

_rsearch.LOAD_DATA_ERROR_swigconstant(_rsearch)
LOAD_DATA_ERROR = _rsearch.LOAD_DATA_ERROR

_rsearch.COSINE_swigconstant(_rsearch)
COSINE = _rsearch.COSINE

_rsearch.EUCLIDEAN_swigconstant(_rsearch)
EUCLIDEAN = _rsearch.EUCLIDEAN

_rsearch.DUMMY_swigconstant(_rsearch)
DUMMY = _rsearch.DUMMY

_rsearch.X86_RAPID_swigconstant(_rsearch)
X86_RAPID = _rsearch.X86_RAPID

_rsearch.X86_PQIVF_swigconstant(_rsearch)
X86_PQIVF = _rsearch.X86_PQIVF

_rsearch.X86_RAPID_MULTI_THREAD_swigconstant(_rsearch)
X86_RAPID_MULTI_THREAD = _rsearch.X86_RAPID_MULTI_THREAD

_rsearch.X86_PQIVF_MULTI_THREAD_swigconstant(_rsearch)
X86_PQIVF_MULTI_THREAD = _rsearch.X86_PQIVF_MULTI_THREAD

_rsearch.FAISS_FLAT_swigconstant(_rsearch)
FAISS_FLAT = _rsearch.FAISS_FLAT

_rsearch.FAISS_LSH_swigconstant(_rsearch)
FAISS_LSH = _rsearch.FAISS_LSH

_rsearch.FAISS_HNSW_swigconstant(_rsearch)
FAISS_HNSW = _rsearch.FAISS_HNSW

_rsearch.FAISS_IVFPQ_swigconstant(_rsearch)
FAISS_IVFPQ = _rsearch.FAISS_IVFPQ

_rsearch.FAISS_IVF_swigconstant(_rsearch)
FAISS_IVF = _rsearch.FAISS_IVF

_rsearch.CPU_BASE_GALLERY_swigconstant(_rsearch)
CPU_BASE_GALLERY = _rsearch.CPU_BASE_GALLERY

_rsearch.PQIVF_GALLERY_swigconstant(_rsearch)
PQIVF_GALLERY = _rsearch.PQIVF_GALLERY

def create_probe_float(dimension, topk, dist_type, method_type):
    return _rsearch.create_probe_float(dimension, topk, dist_type, method_type)
create_probe_float = _rsearch.create_probe_float

def create_probe_int8(dimension, topk, dist_type, method_type):
    return _rsearch.create_probe_int8(dimension, topk, dist_type, method_type)
create_probe_int8 = _rsearch.create_probe_int8
class probe_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, probe_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, probe_float, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsearch.delete_probe_float
    __del__ = lambda self: None

    def create_gallery(self, ga_ptr):
        return _rsearch.probe_float_create_gallery(self, ga_ptr)

    def query(self, x, n, ga, sims, idx):
        return _rsearch.probe_float_query(self, x, n, ga, sims, idx)

    def query_with_uids(self, x, n, ga, uids, m, sims, idx):
        return _rsearch.probe_float_query_with_uids(self, x, n, ga, uids, m, sims, idx)
probe_float_swigregister = _rsearch.probe_float_swigregister
probe_float_swigregister(probe_float)

class probe_int8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, probe_int8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, probe_int8, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsearch.delete_probe_int8
    __del__ = lambda self: None

    def create_gallery(self, ga_ptr):
        return _rsearch.probe_int8_create_gallery(self, ga_ptr)

    def query(self, x, n, ga, sims, idx):
        return _rsearch.probe_int8_query(self, x, n, ga, sims, idx)

    def query_with_uids(self, x, n, ga, uids, m, sims, idx):
        return _rsearch.probe_int8_query_with_uids(self, x, n, ga, uids, m, sims, idx)
probe_int8_swigregister = _rsearch.probe_int8_swigregister
probe_int8_swigregister(probe_int8)

class gallery_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gallery_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gallery_float, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsearch.delete_gallery_float
    __del__ = lambda self: None

    def init(self):
        return _rsearch.gallery_float_init(self)

    def add(self, x, n):
        return _rsearch.gallery_float_add(self, x, n)

    def add_with_uids(self, x, uids, n):
        return _rsearch.gallery_float_add_with_uids(self, x, uids, n)

    def change_by_uids(self, x, uids, n):
        return _rsearch.gallery_float_change_by_uids(self, x, uids, n)

    def remove_by_uids(self, uids, n):
        return _rsearch.gallery_float_remove_by_uids(self, uids, n)

    def query_by_uids(self, uid, n, x):
        return _rsearch.gallery_float_query_by_uids(self, uid, n, x)

    def reset(self):
        return _rsearch.gallery_float_reset(self)

    def store_data(self, file_name):
        return _rsearch.gallery_float_store_data(self, file_name)

    def load_data(self, file_name):
        return _rsearch.gallery_float_load_data(self, file_name)

    def train(self, x, n):
        return _rsearch.gallery_float_train(self, x, n)
gallery_float_swigregister = _rsearch.gallery_float_swigregister
gallery_float_swigregister(gallery_float)

class gallery_int8(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, gallery_int8, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, gallery_int8, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rsearch.delete_gallery_int8
    __del__ = lambda self: None

    def init(self):
        return _rsearch.gallery_int8_init(self)

    def add(self, x, n):
        return _rsearch.gallery_int8_add(self, x, n)

    def add_with_uids(self, x, uids, n):
        return _rsearch.gallery_int8_add_with_uids(self, x, uids, n)

    def change_by_uids(self, x, uids, n):
        return _rsearch.gallery_int8_change_by_uids(self, x, uids, n)

    def remove_by_uids(self, uids, n):
        return _rsearch.gallery_int8_remove_by_uids(self, uids, n)

    def query_by_uids(self, uid, n, x):
        return _rsearch.gallery_int8_query_by_uids(self, uid, n, x)

    def reset(self):
        return _rsearch.gallery_int8_reset(self)

    def store_data(self, file_name):
        return _rsearch.gallery_int8_store_data(self, file_name)

    def load_data(self, file_name):
        return _rsearch.gallery_int8_load_data(self, file_name)

    def train(self, x, n):
        return _rsearch.gallery_int8_train(self, x, n)
gallery_int8_swigregister = _rsearch.gallery_int8_swigregister
gallery_int8_swigregister(gallery_int8)

# This file is compatible with both classic and new-style classes.


